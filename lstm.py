# -*- coding: utf-8 -*-
"""Lstm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UWrOkXR-drkUfPQ45n0ECZ5pkhQyVV1v
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing import sequence
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

# Veri kümesini yükle
max_features = 10000  # En sık kullanılan 10,000 kelimeyi kullanalım
maxlen = 200  # Her bir incelemeyi 200 kelimeyle sınırlayalım
batch_size = 32

print('Veri kümesini yükleme...')
(input_train, y_train), (input_test, y_test) = imdb.load_data(num_words=max_features)
print(len(input_train), 'eğitim dizisi')
print(len(input_test), 'test dizisi')

# İncelemeleri belirli bir uzunluğa getirme veya tamamlama
print('İncelemeleri belirli bir uzunluğa getirme veya tamamlama...')
input_train = sequence.pad_sequences(input_train, maxlen=maxlen)
input_test = sequence.pad_sequences(input_test, maxlen=maxlen)
print('Eğitim dizisi şekli:', input_train.shape)
print('Test dizisi şekli:', input_test.shape)

# LSTM modelini oluşturma
print('LSTM modelini oluşturma...')
model = Sequential()
model.add(Embedding(max_features, 128))
model.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Modeli eğitme
print('Modeli eğitme...')
model.fit(input_train, y_train,
          batch_size=batch_size,
          epochs=5,
          validation_data=(input_test, y_test))

# Sonuçları değerlendirme
print('Sonuçları değerlendirme...')
scores = model.evaluate(input_test, y_test, verbose=0)
print('Test doğruluk oranı:', scores[1])

import matplotlib.pyplot as plt

# Eğitim ve doğrulama kayıp değerlerini alın
train_loss = [0.4383, 0.2673, 0.1904, 0.1378, 0.1194]
val_loss = [0.3512, 0.3265, 0.3784, 0.3760, 0.4485]

# Eğitim ve doğrulama doğruluk oranlarını alın
train_accuracy = [0.7943, 0.8936, 0.9272, 0.9493, 0.9569]
val_accuracy = [0.8562, 0.8635, 0.8643, 0.8617, 0.8647]

# Epoch sayısını belirleyin
epochs = range(1, 6)

# Kayıp değerlerini çizdirin
plt.plot(epochs, train_loss, 'b-', label='Eğitim Kaybı')
plt.plot(epochs, val_loss, 'r-', label='Doğrulama Kaybı')
plt.title('Eğitim ve Doğrulama Kaybı')
plt.xlabel('Epoch')
plt.ylabel('Kayıp')
plt.legend()
plt.show()

# Doğruluk oranlarını çizdirin
plt.plot(epochs, train_accuracy, 'b-', label='Eğitim Doğruluğu')
plt.plot(epochs, val_accuracy, 'r-', label='Doğrulama Doğruluğu')
plt.title('Eğitim ve Doğrulama Doğruluğu')
plt.xlabel('Epoch')
plt.ylabel('Doğruluk')
plt.legend()
plt.show()